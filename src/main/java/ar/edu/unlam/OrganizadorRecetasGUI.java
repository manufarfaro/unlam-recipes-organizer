package ar.edu.unlam;

import ar.edu.unlam.Model.Receta;
import ar.edu.unlam.Services.InvalidServiciosRecetasException;
import ar.edu.unlam.Services.ServiciosRecetasType;
import ar.edu.unlam.Util.FileUtil;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class OrganizadorRecetasGUI extends JFrame implements ActionListener {
    private JLabel recetaPath;
    private JLabel ingredientesPath;
    private JFileChooser fileChooser;
    private JFileChooser folderChooser;
    private JPanel mainPanel;
    private JButton seleccionarReceta;
    private JButton seleccionarIngredientes;
    private JButton comprobarRecetasButton;
    private JList<String> listaRecetas;
    private JRadioButton computadoraRadioButton;
    private JRadioButton baseDeDatosRadioButton;

    private ServiciosRecetasType serviciosRecetasType;

    public OrganizadorRecetasGUI(String title) {
        super(title);

        fileChooser = new JFileChooser(new File(System.getProperty("user.dir")));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(true);
        folderChooser = new JFileChooser(new File(System.getProperty("user.dir")));
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        folderChooser.setAcceptAllFileFilterUsed(false);

        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainPanel);
        this.pack();
        seleccionarReceta.addActionListener(this);
        seleccionarIngredientes.addActionListener(this);
        comprobarRecetasButton.addActionListener(this);
        computadoraRadioButton.addActionListener(this);
        baseDeDatosRadioButton.addActionListener(this);
        computadoraRadioButton.setSelected(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (computadoraRadioButton.isSelected()) {
            this.serviciosRecetasType = ServiciosRecetasType.TXT;
            this.seleccionarIngredientes.setEnabled(true);
            this.seleccionarReceta.setEnabled(true);
        } else if (baseDeDatosRadioButton.isSelected()) {
            this.serviciosRecetasType = ServiciosRecetasType.DB;
            this.seleccionarIngredientes.setEnabled(false);
            this.seleccionarReceta.setEnabled(false);
        }

        if (e.getSource() == comprobarRecetasButton) {
            try {
                OrganizadorReceta organizadorReceta = new OrganizadorRecetaImpl(serviciosRecetasType, this.recetaPath.getText(), this.ingredientesPath.getText());

                DefaultListModel<String> listModel = new DefaultListModel<>();
                for (Receta receta : organizadorReceta.getRecetasValidas()) {
                    listModel.addElement(receta.getReadableData());
                }

                listaRecetas.setModel(listModel);
            } catch (InvalidServiciosRecetasException ex) {
                throw new RuntimeException(ex);
            }
        } else if (e.getSource() == seleccionarReceta) {
            int folderReturnValue = folderChooser.showOpenDialog(null);
            if (folderReturnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = folderChooser.getSelectedFile();
                this.recetaPath.setText(selectedFile.getAbsolutePath());
            }
        } else if (e.getSource() == seleccionarIngredientes) {
            int fileReturnValue = fileChooser.showOpenDialog(null);
            if (fileReturnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                this.ingredientesPath.setText(selectedFile.getAbsolutePath());
            }
        }

        comprobarRecetasButton.setEnabled(serviciosRecetasType == ServiciosRecetasType.DB || (FileUtil.isValidPath(this.recetaPath.getText()) && FileUtil.isValidPath(this.ingredientesPath.getText())));
    }

    public static void main(String[] args) {
        JFrame frame = new OrganizadorRecetasGUI("Organizador de Recetas");
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Recetas");
        panel2.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        seleccionarReceta = new JButton();
        seleccionarReceta.setBorderPainted(true);
        seleccionarReceta.setContentAreaFilled(true);
        seleccionarReceta.setLabel("Seleccionar...");
        seleccionarReceta.setPreferredSize(new Dimension(50, 30));
        seleccionarReceta.setText("Seleccionar...");
        panel2.add(seleccionarReceta, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        recetaPath = new JLabel();
        recetaPath.setText("No se ha seleccionado una receta...");
        panel2.add(recetaPath, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        seleccionarIngredientes = new JButton();
        seleccionarIngredientes.setText("Seleccionar...");
        panel3.add(seleccionarIngredientes, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Ingredientes");
        panel3.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ingredientesPath = new JLabel();
        ingredientesPath.setText("No se ha seleccionado una lista de Ingredientes...");
        panel3.add(ingredientesPath, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comprobarRecetasButton = new JButton();
        comprobarRecetasButton.setEnabled(false);
        comprobarRecetasButton.setText("Comprobar Recetas");
        panel1.add(comprobarRecetasButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        listaRecetas = new JList();
        listaRecetas.setEnabled(false);
        listaRecetas.setSelectionMode(0);
        mainPanel.add(listaRecetas, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel4.add(spacer2, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Origen de Datos");
        panel4.add(label3, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        computadoraRadioButton = new JRadioButton();
        computadoraRadioButton.setText("Computadora");
        panel4.add(computadoraRadioButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        baseDeDatosRadioButton = new JRadioButton();
        baseDeDatosRadioButton.setText("Base de datos");
        panel4.add(baseDeDatosRadioButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(baseDeDatosRadioButton);
        buttonGroup.add(computadoraRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
